version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: qr_scanner_db
    environment:
      POSTGRES_DB: aski_scan
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_database.sql:/docker-entrypoint-initdb.d/init_database.sql
    ports:
      - "5432:5432"
    networks:
      - qr_scanner_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Flask Application
  app:
    build: .
    container_name: qr_scanner_app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=aski_scan
      - DB_USER=postgres
      - DB_PASSWORD=secure_password_123
      - SECRET_KEY=your-super-secret-key-for-production
      - FLASK_ENV=production
      - DEBUG=False
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - qr_scanner_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: qr_scanner_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - qr_scanner_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  qr_scanner_network:
    driver: bridge